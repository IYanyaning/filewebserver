                string boundary;
                string requestBody = m_string;

                std::istringstream iss(requestBody);
                cout<<"iss:"<<iss.str()<<std::endl;
                string line;

                while( std::getline(iss, line)){
                    cout<<"one while getline\n"<<line<<std::endl;
                    boundary = line;
                    cout<<"boundary:\n"<<boundary<<std::endl;
                    cout<<"iss:"<<iss.str()<<std::endl;
                    //if( line.find(  boundary ) != string::npos){
                    if(line.compare(0, 59, requestBody, 0, 59) ==0 ){
                        cout<<"iss:"<<iss.str()<<std::endl;
                        string filename;
                        string data;
                        cout<<"line.compare(boundary) ==0\n";
                        while( std::getline( iss, line)){
                            cout<<"two while getline\n"<<line<<std::endl;
                            if(line.find( "Content-Disposition: form-data;") != string::npos){
                                size_t pos = line.find("filename=\"");
                                if( pos != string::npos){
                                    filename = line.substr( pos + 10);
                                    cout<<filename<<std::endl;
                                    filename = filename.substr( 0 , filename.length() -2 );

                                }else {
                                    pos = line.find( "name=\"");
                                    if( pos != string::npos){
                                        string name = line.substr( pos +6 );
                                        name = name.substr( 0, name.length() -1);
                                        cout<<"File name:"<<name <<std::endl;
                                    }
                                }
                            } else if(line.find("Content-Type:") !=string::npos){
                                size_t pos = line.find(": ");
                                if( pos != string::npos){
                                    string contentType = line.substr(pos +2);
                                    cout<<"Content-Type:"<<contentType<<std::endl;
                                }
                            } else if( line == "\r"){
                                cout<<"我走出了循环落\n";
                                break;
                            }
                        }

                        while(std::getline(iss, line)){
                            //if( line.find(  boundary ) != string::npos){
                            if(line.compare(0, 59, requestBody, 0, 59) ==0 ){
                                break;
                            }else{
                                cout<<"添加了："<<line<<std::endl;
                                data += line + "\n";
                            }
                        }

                        if(!filename.empty() && !data.empty()){
                            std::ofstream file(filename, std::ios::out | std::ios::binary);
                            if(file){
                                file<<data;
                                file.close();
                                cout<<"File saved successfully:"<<filename<<std::endl;

                            }else{
                                cout<<"Failed to save file:"<<filename<<std::endl;
                            }
                        }
                    }
                }

                
                
                
                
                
                
                
                
/////------------------
string requestBody = m_string;
               std::istringstream iss(requestBody);
               string boundry;
               std::getline(iss, boundry);


               char *fileStart = strstr(m_string, boundry.c_str());

               if(fileStart !=NULL){
                    fileStart += strlen(boundry.c_str()) + 2;
               }

               while(1){
                    char * nextBoundaryPos = strstr(fileStart, boundry.c_str());
                    if(nextBoundaryPos ==NULL){
                        break;
                    }

                    char * filenamePos = strstr(fileStart, "filename=\"");
                    if( filenamePos !=NULL){
                        char *filenameStart = filenamePos + strlen("filename=\"");
                        char *filenameEnd = strstr(filenameStart, "\"\r\n");

                        if(filenameEnd !=NULL){
                            *filenameEnd = '\0';

                            printf("filename:%s\n",filenameStart);
                            FILE *file = fopen(filenameStart, "wb");

                            //定位文件内容起始位置
                            char * fileContentStart = strstr(fileStart, "\r\n\r\n");
                            if(fileContentStart !=NULL){
                                fileContentStart +=4;


                            int contentLength = nextBoundaryPos - fileContentStart;
                            printf("fileContentStart:%s\n",fileContentStart);
                            fwrite( fileContentStart, sizeof(char), contentLength, file);
                            }

                            fclose(file);
                        }

                    }

                    fileStart = nextBoundaryPos + strlen(boundry.c_str()) + 2;
               }
