#include "http_conn.h"

using std::map;
using std::string;
static int m_close_log = 0;
namespace Mycompress
{
    static int MAX_FILENAME = 256;
    static int WRITEBUFFERSIZE = 8192;
} // namespace Mycompress

// 定义HTTP响应的一些状态信息
const char *ok_200_title = "OK";
const char *error_400_title = "Bad Request";
const char *error_400_form = "Your request has bad syntax or is inherently impossible to satisfy.\n";
const char *error_403_title = "Forbidden";
const char *error_403_form = "You do not have permission to get file from this server.\n";
const char *error_404_title = "Not Found";
const char *error_404_form = "The requested file was not found on this server.\n";
const char *error_500_title = "Internal Error";
const char *error_500_form = "There was an unusual problem serving the requested file.\n";

// 网站根目录
const char *doc_root = "./resources";

// 将表中的用户名和密码放入map

map<string, string> users;
map<string, string> uuid_file_path;
locker m_locker;
void http_conn::initmysql_result(connection_pool *connPool)
{
    // 先从连接池取一个连接
    MYSQL *mysql = NULL;
    connectionRAII mysqlcon(&mysql, connPool);
    this->m_connection_pool = connPool;
    // 在user表中检索username， passwd数据， 浏览器输入
    if (mysql_query(mysql, "SELECT user_account, user_password FROM test"))
    {
        LOG_ERROR("SELECT error:%s\n", mysql_error(mysql));
        return;
    }

    // 从表中检索完整的结果集
    MYSQL_RES *result = mysql_store_result(mysql);
    if (result == NULL)
    {
        LOG_ERROR("无法获取查询结果: %s\n", mysql_error(mysql));
        mysql_free_result(result);
        return;
    }

    // 返回结果集中的列数
    int num_fields = mysql_num_fields(result);
    // cout<<"num_fields:"<<num_fields<<std::endl;
    // 返回所有字段结构的数组
    MYSQL_FIELD *fields = mysql_fetch_fields(result);

    // 从结果集中获取下一行，将对应的用户名和密码，存入map中
    while (MYSQL_ROW row = mysql_fetch_row(result))
    {

        string temp1(row[0]);
        string temp2(row[1]);
        users[temp1] = temp2;
    }

    // 查询语句
    const char *query = "SELECT uuid, file_path FROM user_files";

    // 执行查询
    if (mysql_query(mysql, query) != 0)
    {
        fprintf(stderr, "查询数据时出错: %s\n", mysql_error(mysql));
        mysql_free_result(result);
        return;
    }

    // 获取查询结果
    result = mysql_store_result(mysql);
    if (result == NULL)
    {
        fprintf(stderr, "无法获取查询结果: %s\n", mysql_error(mysql));
        mysql_free_result(result);
        return;
    }
    // 保存查询结果的键值对容器

    // 遍历查询结果并保存到容器中
    while (MYSQL_ROW row = mysql_fetch_row(result))
    {
        const string uuid = row[0];
        const string file_path = row[1];

        // 将 uuid 和 file_path 保存到键值对容器中
        uuid_file_path[uuid] = file_path;
    }

    // 打印键值对
    for (const auto &pair : uuid_file_path)
    {
        std::cout << "UUID: " << pair.first << ", File Path: " << pair.second << std::endl;
    }

    // 释放结果集
    mysql_free_result(result);
    m_connection_pool->ReleaseConnection(mysql);
}
http_conn::http_conn()
{
}

int setnonblocking(int fd)
{
    int old_option = fcntl(fd, F_GETFL);
    int new_option = old_option | O_NONBLOCK;
    fcntl(fd, F_SETFL, new_option);
    return old_option;
}

// 向epoll中添加需要监听的文件描述符

void addfd(int epollfd, int fd, bool one_shot)
{

    epoll_event event;
    event.data.fd = fd;
    event.events = EPOLLIN | EPOLLRDHUP;
    if (one_shot)
    {
        // 放置同一个通信被不同的线程处理
        event.events |= EPOLLONESHOT;
    }

    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &event);
    // 设置文件描述符非阻塞
    setnonblocking(fd);
}

// 向epoll中移除监听的文件描述符
void removefd(int epollfd, int fd)
{
    epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, 0);
    close(fd);
}

// 修改文件描述符，重置socket上的EPOLLONESHOT事件，以确保下一次可读时，EPOLLIN事件能被触发
void modfd(int epollfd, int fd, int ev)
{

    epoll_event event;
    event.data.fd = fd;
    event.events = ev | EPOLLET | EPOLLONESHOT | EPOLLRDHUP;
    epoll_ctl(epollfd, EPOLL_CTL_MOD, fd, &event);
}

// 所有的客户数
int http_conn::m_user_count = 0;
// 所有socket上的事件都被注册到同一个epoll内核事件中，所以设置成静态的
int http_conn::m_epollfd = -1;

// 关闭连接
void http_conn::close_conn()
{
    if (m_sockfd != -1)
    {
        removefd(m_epollfd, m_sockfd);
        m_sockfd = -1;
        m_user_count--;
    }
}

// 初始化连接，外部调用初始化套接字地址
void http_conn::init(int sockfd, const sockaddr_in &addr)
{
    m_sockfd = sockfd;
    m_address = addr;

    // 端口复用

    int reuse = 1;
    setsockopt(m_sockfd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse));
    addfd(m_epollfd, sockfd, true);

    client = new client_data;
    client->address = m_address;
    client->sockfd = m_sockfd;

    m_user_count++;
    std::cout << "httpinit----------\n";
    init();
}

void http_conn::init()
{

    mysql = NULL;
    m_connection_pool = NULL;
    bytes_to_send = 0;
    bytes_have_send = 0;

    m_check_state = CHECK_STATE_REQUESTLINE; // 初始化为检查请求行
    m_linger = false;                        // 默认不保持连接， Connection: keep-alive

    m_method = GET; // 默认请求方式为GET
    m_url = 0;
    m_boundary = 0;
    m_content_type = 0;
    m_version = 0;
    m_content_length = 0;
    m_host = 0;
    m_start_line = 0;
    m_checked_idx = 0;
    m_read_idx = 0;
    m_write_idx = 0;
    cgi = 0;

    //    bzero(m_read_buf, READ_BUFFER_SIZE);
    //    bzero(m_write_buf, WRITE_BUFFER_SIZE);
    //    bzero(m_real_file, FILENAME_LEN);
    memset(m_read_buf, '\0', READ_BUFFER_SIZE);
    memset(m_write_buf, '\0', WRITE_BUFFER_SIZE);
    memset(m_real_file, '\0', FILENAME_LEN);
}

// 循环读取客户端数据，直到无数据可读或者对方关闭连接
bool http_conn::read()
{
    if (m_read_idx >= READ_BUFFER_SIZE)
    {
        return false;
    }
    int bytes_read = 0;
    while (true)
    {
        // 从m_read_buf + m_read_idx 索引开始保存数据，大小是READ_BUFFER_SIZE
        bytes_read = recv(m_sockfd, m_read_buf + m_read_idx, READ_BUFFER_SIZE - m_read_idx, 0);
        if (bytes_read == -1)
        {
            if (errno == EAGAIN || errno == EWOULDBLOCK)
            {
                // 没有数据
                // cout<<"没有数据\n";
                break;
            }
            return false;
        }
        else if (bytes_read == 0)
        { // 对方关闭连接
            cout << "对方关闭连接\n";
            return false;
        }
        // printf("bytes:%d\n",bytes_read);
        m_read_idx += bytes_read;
        // cout<<m_read_idx<<std::endl;
        // printf("m_read_idx:%d\n",m_read_idx);
    }
    return true;
}

// 解析一行，判断依据\r\n
http_conn::LINE_STATUS http_conn::parse_line()
{
    char temp;
    for (; m_checked_idx < m_read_idx; ++m_checked_idx)
    {
        temp = m_read_buf[m_checked_idx];
        if (temp == '\r')
        {
            if ((m_checked_idx + 1) == m_read_idx)
            {
                return LINE_OPEN;
            }
            else if (m_read_buf[m_checked_idx + 1] == '\n')
            {
                m_read_buf[m_checked_idx++] = '\0';
                m_read_buf[m_checked_idx++] = '\0';
                return LINE_OK;
            }
            return LINE_BAD;
        }
        else if (temp == '\n')
        {
            if ((m_checked_idx > 1) && (m_read_buf[m_checked_idx - 1] == '\r'))
            {
                m_read_buf[m_checked_idx - 1] = '\0';
                m_read_buf[m_checked_idx++] = '\0';
                return LINE_OK;
            }
            return LINE_BAD;
        }
    }
    return LINE_OPEN;
}

/*
 * C 库函数 char *strpbrk(const char *str1, const char *str2) 检索字符串 str1 中第一个匹配字符串 str2 中字符的字符，不包含空结束字符。也就是说，依次检验字符串 str1 中的字符，当被检验字符在字符串 str2 中也包含时，则停止检验，并返回该字符位置。
 */
// 解析HTTP请求行，获得请求方法， 目标URL,以及HTTL版本号
http_conn::HTTP_CODE http_conn::parse_request_line(char *text)
{   printf("%s\n",text);
    // GET /index.html HTTP/ 1.1
    m_url = strpbrk(text, " \t"); // 判断第二个参数中的字符在text中最先出现的位置
    cout<<m_url<<endl;
    if (!m_url)
    {
        return BAD_REQUEST;
    }
    // GET\0/index.html HTTP/1.1
    *m_url++ = '\0'; // 置位空字符，字符串结束符
    char *method = text;
    if (strcasecmp(method, "GET") == 0)
    { // 忽略大小写比较
        m_method = GET;
    }
    else if (strcasecmp(method, "POST") == 0)
    {
        m_method = POST;
        cgi = 1;
    }
    else
    {
        return BAD_REQUEST;
    }

    // /index.html HTTP/1.1
    // 检索字符串str1中第一个不在字符串str2中出现的字符下标
    m_url += strspn(m_url, " \t");
    m_version = strpbrk(m_url, " \t");
    if (!m_version)
    {
        return BAD_REQUEST;
    }
    *m_version++ = '\0';
    m_version += strspn(m_version, " \t");
    if (strcasecmp(m_version, "HTTP/1.1") != 0)
    {
        return BAD_REQUEST;
    }
    /*
        http://192.168.110.129:10000/index.html
    */
    if (strncasecmp(m_url, "http://", 7) == 0)
    {
        m_url += 7;
        // 在参数str所指向的字符串中搜索第一次出现字符 c (一个无符号字符)的位置
        m_url = strchr(m_url, '/');
    }
    if (strncasecmp(m_url, "https://", 8) == 0)
    {
        m_url += 8;
        m_url = strchr(m_url, '/');
    }
    if (!m_url || m_url[0] != '/')
    {
        return BAD_REQUEST;
    }
    cout<<m_url<<endl;
    if (strlen(m_url) == 1)
    {
        strcat(m_url, "judge.html");
    }
    cout<<m_url<<endl;
    m_check_state = CHECK_STATE_HEADER;
    return NO_REQUEST;
}

// 解析HTTP请求的一个头部信息
http_conn::HTTP_CODE http_conn::parse_headers(char *text)
{
    // 遇到空行，表示头部字段解析完毕
    if (text[0] == '\0')
    {
        // 如果HTTP请求有消息体，则还需要读取m_content_length字节的消息体
        // 状态机转移到CHECK_STATE_CONTENT状态
        if (m_content_length != 0)
        {
            m_check_state = CHECK_STATE_CONTENT;
            return NO_REQUEST;
        }
        // 否则说明已经得到了一个完整的HTTP请求
        return GET_REQUEST;
    }
    else if (strncasecmp(text, "Connection:", 11) == 0)
    {
        // 处理Connection头部字段， Connection: keep-alive
        text += 11;
        text += strspn(text, "\t");
        if (strcasecmp(text, "keep-alive") == 0)
        {
            m_linger = true;
        }
    }
    else if (strncasecmp(text, "Content-Length:", 15) == 0)
    {
        // 处理Content-Length头部字段
        text += 15;
        text += strspn(text, "\t");
        m_content_length = atol(text);
    }
    else if (strncasecmp(text, "Host:", 5) == 0)
    {
        // 处理Host头部字段
        text += 5;
        text += strspn(text, "\t");
        m_host = text;
    }
    else if (strncasecmp(text, "Content-Type:", 13) == 0)
    {
        /*char tmp_text[sizeof(text)];
        strcpy(tmp_text, text);
        m_content_type = strstr(text, "Content-Type:");
        if (m_content_type != NULL) {
            m_content_type += strlen("Content-Type:");
            m_content_type = strtok(m_content_type, " ;");
            printf("content_type:\n%s\n",m_content_type);
        }

        // 提取 boundary 的值
        m_boundary = strstr(tmp_text, "boundary=");

        if (m_boundary != NULL) {
            m_boundary += strlen("boundary=");
            printf("m_boundary:\n%s\n",m_boundary);
        }*/

        
        
    }
    else
    {
        LOG_INFO("oop!unknow header: %s", text);
    }
    return NO_REQUEST;
}

// 没有真正的解析HTTP请求的消息体，只是判断它是否完整读入了
http_conn::HTTP_CODE http_conn::parse_content(char *text)
{
    if (m_read_idx >= (m_content_length + m_checked_idx))
    {
        text[m_content_length] = '\0';

        // POST请求中最后为输入的用户名和密码
        m_string = text;
        return GET_REQUEST;
    }
    return NO_REQUEST;
}

// 主状态机，解析请求
http_conn::HTTP_CODE http_conn::process_read()
{
    LINE_STATUS line_status = LINE_OK;
    HTTP_CODE ret = NO_REQUEST;
    char *text = 0;
    while (((m_check_state == CHECK_STATE_CONTENT) && (line_status == LINE_OK)) || ((line_status = parse_line()) == LINE_OK))
    {
        // 获取到了一行数据
        text = get_line();
        m_start_line = m_checked_idx;

        LOG_INFO("%s", text);

        switch (m_check_state)
        {
        case CHECK_STATE_REQUESTLINE:
        {
            ret = parse_request_line(text);
            if (ret == BAD_REQUEST)
            {
                return BAD_REQUEST;
            }
            break;
        }
        case CHECK_STATE_HEADER:
        {
            ret = parse_headers(text);
            if (ret == BAD_REQUEST)
            {
                return BAD_REQUEST;
            }
            else if (ret == GET_REQUEST)
            {
                return do_request();
            }
            break;
        }
        case CHECK_STATE_CONTENT:
        {
            ret = parse_content(text);
            if (ret == GET_REQUEST)
            {
                return do_request();
            }
            line_status = LINE_OPEN;
            break;
        }
        default:
        {
            return INTERNAL_ERROR;
        }
        }
    }
    return NO_REQUEST;
}

bool directoryExists(const string &directory)
{
    struct stat buffer;
    return (stat(directory.c_str(), &buffer) == 0 && S_ISDIR(buffer.st_mode));
}

bool createDirectory(const string &directory)
{
    if (directoryExists(directory))
    {
        //cout << "目录已经存在" << std::endl;
        LOG_INFO("目录已经存在", directory);
        return true;
    }
    else
    {
        if (mkdir(directory.c_str(), 0777) == 0)
        {
            //cout << "目录创建成功" << std::endl;
            LOG_INFO("目录创建成功", directory);
            return true;
        }
        else
        {
            //std::cerr << "无法创建目录:" << directory << std::endl;
            LOG_ERROR("无法创建目录", directory);
            return false;
        }
    }
}

bool http_conn::createNewHtml(const string &uuid_key, const string &file_path)
{
    std::ifstream inFile("./resources/key.html"); // 打开原始的 HTML 文件
    if (!inFile.is_open())
    {
        return false;
    }
    std::string content((std::istreambuf_iterator<char>(inFile)),
                        std::istreambuf_iterator<char>());
    inFile.close();

    std::string placeholder = "这里是密钥值";
    size_t pos = content.find(placeholder);
    if (pos != std::string::npos)
    {
        content.replace(pos, placeholder.length(), uuid_key); // 替换密钥值占位符为实际的密钥值
    }

    std::ofstream outFile(file_path); // 创建新的 HTML 文件
    if (!outFile.is_open())
    {
        return false;
    }
    outFile << content;
    outFile.close();
    return true;
}

bool http_conn::compress_folder(const char* folder_path, const char* zip_path){
    // 创建 zip 文件
    zipFile zip = zipOpen64(zip_path, 0);
    if (zip == NULL) {
        //printf("Failed to create zip file.\n");
        return false;
    }

    // 遍历文件夹及其子文件夹，并添加到 zip 中
    int result = zip_folder(zip, folder_path, folder_path);

    // 关闭 zip 文件
    zipClose(zip, NULL);

    if (result != 0) {
        //printf("Failed to compress folder.\n");
        return false;
    }

    //printf("Folder compressed successfully.\n");
    return true;
}

int http_conn::zip_folder(zipFile zip, const char* folder_path, const char* base_path){
    // 打开文件夹
    DIR* folder = opendir(folder_path);
    if (folder == NULL) {
        printf("Failed to open folder: %s\n", folder_path);
        return -1;
    }

    // 读取文件夹内容
    struct dirent* entry;
    while ((entry = readdir(folder)) != NULL) {
        // 忽略 . 和 .. 目录
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
            continue;
        }

        // 构建文件/文件夹路径
        char file_path[Mycompress::MAX_FILENAME];
        snprintf(file_path, sizeof(file_path), "%s/%s", folder_path, entry->d_name);

        // 判断文件类型
        if (entry->d_type == DT_REG) {
            // 构建 zip 中的路径，去除基本路径前缀
            const char* rel_path = file_path + strlen(base_path) + 1;

            // 添加文件到 zip
            FILE* file = fopen64(file_path, "rb");
            if (file == NULL) {
                printf("Failed to open file: %s\n", file_path);
                return -1;
            }

            // 创建 zip 中的文件
            zip_fileinfo file_info;
            memset(&file_info, 0, sizeof(file_info));
            zipOpenNewFileInZip(zip, rel_path, &file_info, NULL, 0, NULL, 0, NULL, Z_DEFLATED, Z_DEFAULT_COMPRESSION);

            // 读取文件内容并写入 zip
            char buffer[Mycompress::WRITEBUFFERSIZE];
            int size;
            while ((size = fread(buffer, 1, sizeof(buffer), file)) > 0) {
                zipWriteInFileInZip(zip, buffer, size);
            }

            // 关闭文件和 zip 中的文件
            fclose(file);
            zipCloseFileInZip(zip);
        } else if (entry->d_type == DT_DIR) {
            // 递归压缩子文件夹
            int result = zip_folder(zip, file_path, base_path);
            if (result != 0) {
                closedir(folder);
                return result;
            }
        }
    }

    // 关闭文件夹
    closedir(folder);

    return 0;
}

// 当得到了一个完整的、正确的HTTP请求时，就分析目标文件的属性
// 如果目标文件存在、对所有用户可读，且不是目录，则使用mmap将其
// 映射到内存地址m_file_address处，并告诉调用者获取文件成功
http_conn::HTTP_CODE http_conn::do_request()
{
    // "/root/chen/webserver/resources"
    strcpy(m_real_file, doc_root);
    int len = strlen(doc_root);
    cout << "derequest---------------\n";
    // printf("m_url:%s\n",m_url);
    const char *p = strrchr(m_url, '/');

    // 处理cgi
    if (cgi == 1 && (*(p + 1) == '2' || *(p + 1) == '3'))
    {

        // 根据标志判断是登录检测还是注册检测
        char flag = m_url[1];

        char *m_url_real = (char *)malloc(sizeof(char) * 200);

        strcpy(m_url_real, "/");

        strcat(m_url_real, m_url + 2);

        strncpy(m_real_file + len, m_url_real, FILENAME_LEN - len - 1);

        free(m_url_real);

        // 将用户名和密码提取出来
        // user=123&&passwd=123
        // printf("m_string:%s\n",m_string);
        char name[100], password[100];
        int i;
        for (i = 5; m_string[i] != '&'; ++i)
        {
            name[i - 5] = m_string[i];
            name[i - 5 + 1] = '\0';
        }
        int j = 0;
        for (i = i + 10; m_string[i] != '\0'; ++i, ++j)
        {
            password[j] = m_string[i];
            password[j + 1] = '\0';
        }

        user_name = name;
        user_password = password;

        // 同步线程登录校验
        if (*(p + 1) == '3')
        {
            // 如果是注册，先检测数据库中是否有重名的
            // 没有重名的，进行增加数据

            if (users.find(name) == users.end())
            {

                char *sql_insert = (char *)malloc(sizeof(char) * 200);
                strcpy(sql_insert, "INSERT INTO test(user_account, user_password) VALUES(");
                strcat(sql_insert, "'");
                strcat(sql_insert, name);
                strcat(sql_insert, "', '");
                strcat(sql_insert, password);
                strcat(sql_insert, "')");

                connectionRAII mysqlcon1(&mysql, m_connection_pool);

                m_locker.lock();

                int res = mysql_query(mysql, sql_insert);

                users.insert(std::pair<string, string>(string(name), string(password)));
                m_locker.unlock();

                if (res == 0)
                {
                    printf("m_url:%s\n", m_url);
                    strcpy(m_url, "/log.html");

                    LOG_INFO("--------------client insert data OK---------------");
                }
                else
                {
                    strcpy(m_url, "/registerError.html");
                    LOG_ERROR("--------------client insert data error--------------");
                }
            }
            else
            {
                strcpy(m_url, "/registerError.html");
            }
        }
        else if (*(p + 1) == '2')//登录成功
        {
            if (users.find(name) != users.end() && users[name] == password)
            {
                strcpy(m_url, "/send_rev.html");
            }
            else
            {
                strcpy(m_url, "/logError.html");
            }
        }
    }

    if (*(p + 1) == '0')//注册界面
    {
        char *m_url_real = (char *)malloc(sizeof(char) * 200);
        strcpy(m_url_real, "/register.html");
        strncpy(m_real_file + len, m_url_real, strlen(m_url_real));
        free(m_url_real);
    }
    else if (*(p + 1) == '1')//登录界面
    {
        char *m_url_real = (char *)malloc(sizeof(char) * 200);
        strcpy(m_url_real, "/log.html");
        strncpy(m_real_file + len, m_url_real, strlen(m_url_real));

        free(m_url_real);
    }
    else if (*(p + 1) == '5')//下载文件
    {
        printf("m_string:\n%s\n", m_string);
        string uuid_key;
        int i;
        for (i = 4; uuid_key.length() < 36; ++i)
        {
            uuid_key += m_string[i];
        }
        for (const auto &pair : uuid_file_path)
        {
            //cout << "pair.first:" << pair.first.length() << std::endl;
            if (pair.first == uuid_key)
            {
                
                //将文件打包
                

                string dirPath = pair.second; // 目录路径
                string outputFilePath = pair.second + ".zip";//"/path/to/output.zip"; // 压缩文件输出路径
                if(compress_folder(dirPath.c_str(), outputFilePath.c_str())){
                    text = true;
                    strcpy(m_real_file, outputFilePath.c_str());
                    break;
                }    
            }
        }

        if (!text)
        {
            char *m_url_real = (char *)malloc(sizeof(char) * 200);
            strcpy(m_url_real, "/re_send_rev(key).html");
            strncpy(m_real_file + len, m_url_real, strlen(m_url_real));
            free(m_url_real);
        }
    }
    else if (*(p + 1) == '6')
    {
        char *m_url_real = (char *)malloc(sizeof(char) * 200);
        strcpy(m_url_real, "/video.html");
        strncpy(m_real_file + len, m_url_real, strlen(m_url_real));

        free(m_url_real);
    }
    else if (*(p + 1) == '7')//上传文件
    {
        printf("m_string:\n%s", m_string);
        cout << "**********************************************************\n";
        // 30位 3345 0425 0724 7164 7520 2816 9270 24
        // 29位 ---- ---- ---- ---- ---- ---- ---- -

        bool file_err = false;
        bool success_return_key_html = false;
        char *m_url_real = (char *)malloc(sizeof(char) * 200);

        if (!user_name.empty())
        {
            std::string boundary;
            std::string requestBody = m_string;

            std::istringstream iss(requestBody);

            std::string line;
            std::string tmp = "--";
            getline(iss, line);

            boundary = line;
            boundary.pop_back();

            boundary += tmp;
//---- WebK itFo rmBo unda ry9c mHoP tajp bQWj o2
            std::cout << "boundary:\n"
                      << boundary << std::endl;
            string file_path = "./user_file/";
            string file_path_for_uuid_key = file_path;
            bool file_path_sure = false;
            bool m_string_is_end = true;
            while (m_string_is_end)
            {

                // if( line.find(  boundary ) != string::npos){
                if (strncmp(line.c_str(), boundary.c_str(), boundary.length() - 2 ) == 0)
                {

                    string filename;
                    string data;

                    while (std::getline(iss, line))
                    {
                        cout << "two while getline\n"
                             << line << std::endl;
                        if (line.find("Content-Disposition: form-data;") != string::npos)
                        {
                            size_t pos = line.find("filename=\"");
                            if (pos != string::npos)
                            {
                                filename = line.substr(pos + 10);
                                cout << filename << std::endl;
                                filename = filename.substr(0, filename.length() - 2);
                            }
                            else
                            {
                                pos = line.find("name=\"");
                                if (pos != string::npos)
                                {
                                    string name = line.substr(pos + 6);
                                    name = name.substr(0, name.length() - 1);
                                }
                            }
                        }
                        else if (line.find("Content-Type:") != string::npos)
                        {
                            size_t pos = line.find(": ");
                            if (pos != string::npos)
                            {
                                string contentType = line.substr(pos + 2);
                            }
                        }
                        else if (line == "\r")
                        {
                            //cout << "我走出了循环落\n";
                            break;
                        }
                    }
                    //---- ---- ---- ---- ---- ---- ---- -409 3948 8311 2542 3271 2652 6780 42--

                    //---- ---- ---- ---- ---- ---- ---- -409 3948 8311 2542 3271 2652 6780 42
                    while (std::getline(iss, line))
                    {
                        // if( line.find(  boundary ) != string::npos){
                        if (strncmp(line.c_str(), boundary.c_str(), boundary.length() -2 ) == 0)
                        {

                            if (strncmp(line.c_str(), boundary.c_str(), boundary.length()) == 0)
                            {
                                m_string_is_end = false;
                                break;
                            }
                            //cout << "line:\n"<< line << std::endl;
                            data.pop_back();
                            LOG_INFO("save filename: %s", filename);
                            break;
                        }
                        else
                        {
                            //cout << "添加了：" << line << std::endl;
                            data += line + "\n";
                        }
                    }

                    if (!filename.empty() && !data.empty())
                    {

                        int pos = 0;
                        pos = filename.find('.');
                        string file_name_dir = filename.substr(0, pos);
                        if (!file_path_sure)
                        {
                            file_path += user_name;

                            if(!createDirectory(file_path)){
                                file_err = true;
                                break;
                            }

                            file_path += "/";
                            
                            file_path += file_name_dir;
                            file_path_for_uuid_key = file_path;
                            file_path_sure = true;
                            if (!createDirectory(file_path))
                            {
                                file_err = true;
                                break;
                            }
                        }
                        file_path += "/";
                        file_path += file_name_dir;

                        if (createDirectory(file_path))
                        {
                            // 创建文件
                            file_path += "/";
                            file_path += filename;
                            //cout << "file_path:" << file_path << std::endl;
                            std::ofstream file(file_path, std::ios::out | std::ios::binary);
                            if (file.is_open())
                            {
                                file << data;
                                file.close();
                                //cout << "File saved successfully:" << filename << std::endl;
                                LOG_INFO("File:%s saved successfully",filename);
                                file_path = file_path_for_uuid_key;
                            }
                            else
                            {
                                cout << "Failed to save file:" << filename << std::endl;
                                LOG_ERROR("Failed to save file:", filename);
                                file_err = true;
                            }
                        }
                    }
                }
            }

            if (file_err)
            {
                strcpy(m_url_real, "/reWelcome.html");
            }
            else
            {
                uuid_t uuid;
                char uuidString[37];

                // 生成 UUID
                uuid_generate(uuid);

                // 将 UUID 转换为字符串表示
                uuid_unparse(uuid, uuidString);

                // 打印生成的 UUID
                printf("生成的 UUID 为：%s\n", uuidString);

                string keyhtml = file_path_for_uuid_key + "/key.html";
                cout << keyhtml << std::endl;
                // 操作密钥e1e9 41fb -dc9 f-43 59-8 d72- d62c 06e9 f388

                if (createNewHtml(uuidString, keyhtml))
                {

                    // 设置要插入的数据
                    const char *account = user_name.c_str();
                    const char *uuid = uuidString;
                    const char *file_path = file_path_for_uuid_key.c_str();
                    int download_count = 2;

                    // 构建插入语句
                    char insert_query[512];
                    sprintf(insert_query, "INSERT INTO user_files (user_account, uuid, file_path, download_count) VALUES ('%s', '%s', '%s', %d)",
                            account, uuid, file_path, download_count);
                    connectionRAII mysqlcon1(&mysql, m_connection_pool);

                    // 执行插入语句
                    if (mysql_query(mysql, insert_query) != 0)
                    {
                        fprintf(stderr, "插入数据时出错: %s\n", mysql_error(mysql));
                        
                        strcpy(m_url_real, "/re_send_rev.html");
                    }
                    else
                    {
                        strcpy(m_url_real, keyhtml.c_str()); // 返回带密钥的html

                        success_return_key_html = true;

                        uuid_file_path.insert(std::pair<string, string>(string(uuid), string(file_path)));
                    }
                    m_connection_pool->ReleaseConnection(mysql);


                    
                    
                    
                    
                }
                else
                {
                    strcpy(m_url_real, "/re_send_rev.html");
                }

                // printf("m_url_real:\n%s\n",m_url_real);
            }
            // cout << "表哥， 我粗来了哦\n";
            // cout << "name: " << user_name << "password: " << user_password << std::endl;
        }
        else
        {
            strcpy(m_url_real, "/reLog.html");
        }
        if (success_return_key_html)
        {
            strncpy(m_real_file, m_url_real, strlen(m_url_real));
        }
        else
        {
            strncpy(m_real_file + len, m_url_real, strlen(m_url_real));
        }

        free(m_url_real);
    }
    else if((* p + 1) == '8')//前端申请获取该用户所有文件信息
    {
        strncpy(m_real_file + len, m_url, FILENAME_LEN - len - 1);

    } 
    else
    {
        strncpy(m_real_file + len, m_url, FILENAME_LEN - len - 1);
    }
    // printf("m_real_file:\n%s\n",m_real_file);

    LOG_INFO("-----------------------%s\n", m_real_file);
    // strncpy( m_real_file + len, m_url, FILENAME_LEN - len -1 );
    // 获取m_real_file文件的相关的状态信息， -1失败， 0成功
    if (stat(m_real_file, &m_file_stat) < 0)
    {
        return NO_RESOURCE;
    }

    // 判断访问权限
    if (!(m_file_stat.st_mode & S_IROTH))
    {
        return FORBIDDEN_REQUEST;
    }

    // 判断是否是目录
    if (S_ISDIR(m_file_stat.st_mode))
    {
        return BAD_REQUEST;
    }

    // 以只读方式打开文件
    int fd = open(m_real_file, O_RDONLY);
    if (fd == -1)
    {
        perror("open");
        return BAD_REQUEST;
    }
    // 创建内存映射
    m_file_address = (char *)mmap(0, m_file_stat.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
    close(fd);
    return FILE_REQUEST;
}

// 对内存映射区执行munmap操作
void http_conn::unmap()
{
    if (m_file_address)
    {
        munmap(m_file_address, m_file_stat.st_size);
        m_file_address = 0;
    }
}

// 写HTTP响应
bool http_conn::write()
{
    int temp = 0;
    if (bytes_to_send == 0)
    {
        // 将要发送的字节为0.这一次响应结束
        modfd(m_epollfd, m_sockfd, EPOLLIN);
        init();
        return true;
    }
    //    if(!text){
    while (1)
    {

        // 分散写
        temp = writev(m_sockfd, m_iv, m_iv_count);
        if (temp <= -1)
        {
            // 如果TCP写缓冲没有空间，则等待下一轮EPOLLOUT事件，虽然在此期间
            // 服务器无法立即接收到统一客户的下一个请求，但可以保证连接的完整性
            if (errno == EAGAIN)
            {
                modfd(m_epollfd, m_sockfd, EPOLLOUT);
                return true;
            }
            unmap();
            return false;
        }

        bytes_have_send += temp;
        bytes_to_send -= temp;

        if (bytes_have_send >= m_iv[0].iov_len)
        {
            m_iv[0].iov_len = 0;
            m_iv[1].iov_base = m_file_address + (bytes_have_send - m_write_idx);
            m_iv[1].iov_len = bytes_to_send;
        }
        else
        {
            m_iv[0].iov_base = m_write_buf + bytes_have_send;
            m_iv[0].iov_len = m_iv[0].iov_len - temp;
        }
        printf("write\n:%s", m_write_buf);
        if (bytes_to_send <= 0)
        {
            cout<<" 没有数据要发送了\n";
            unmap();
            modfd(m_epollfd, m_sockfd, EPOLLIN);

            if (m_linger)
            {
                init();
                return true;
            }
            else
            {
                init();
                return false;
            }
        }
    }

}

// 往写缓冲写入待发送的数据
bool http_conn::add_response(const char *format, ...)
{
    if (m_write_idx >= WRITE_BUFFER_SIZE)
    {
        return false;
    }
    va_list arg_list;
    va_start(arg_list, format);
    int len = vsnprintf(m_write_buf + m_write_idx, WRITE_BUFFER_SIZE - 1 - m_write_idx, format, arg_list);
    if (len >= (WRITE_BUFFER_SIZE - 1 - m_write_idx))
    {
        return false;
    }
    m_write_idx += len;
    va_end(arg_list);
    LOG_INFO("request:%s", m_write_buf);
    return true;
}

bool http_conn::add_status_line(int status, const char *title)
{
    return add_response("%s %d %s\r\n", "HTTP/1.1", status, title);
}

bool http_conn::add_headers(int content_length)
{
    add_content_length(content_length);
    if (!text)
    {
        add_content_type();
    }
    else
    {
        add_content_text_plain(); // 下载文本文件
        text = false;
    }

    add_linger();
    add_blank_line();

    return true;
}

bool http_conn::add_content_length(int content_length)
{
    return add_response("Content-Length: %d\r\n", content_length);
}

bool http_conn::add_content_type()
{
    return add_response("Content-Type:%s\r\n", "text/html");
}

bool http_conn::add_content_text_plain()
{
    // return add_response( "Content-Type:%s\r\n", "application/octet-stream");
    return add_response("Content-Type:%s\r\n", "multipart/form-data");
}

bool http_conn::add_linger()
{
    return add_response("Connection: %s\r\n", (m_linger == true) ? "keep-alive" : "close");
}

bool http_conn::add_blank_line()
{
    return add_response("%s", "\r\n");
}

bool http_conn::add_content(const char *content)
{
    return add_response("%s", content);
}
// 根据服务器处理HTTP请求的结果，决定返回给客户端的内容
bool http_conn::process_write(HTTP_CODE ret)
{
    switch (ret)
    {
    case INTERNAL_ERROR:
        add_status_line(500, error_500_title);
        add_headers(strlen(error_500_form));
        if (!add_content(error_500_form))
        {
            return false;
        }
        break;

    case BAD_REQUEST:
        add_status_line(400, error_400_title);
        add_headers(strlen(error_400_form));
        if (!add_content(error_400_form))
        {
            return false;
        }
        break;

    case NO_RESOURCE:
        add_status_line(404, error_404_title);
        add_headers(strlen(error_404_form));
        if (!add_content(error_404_form))
        {
            return false;
        }
        break;

    case FORBIDDEN_REQUEST:
        add_status_line(403, error_403_title);
        add_headers(strlen(error_403_form));
        if (!add_content(error_403_form))
        {
            return false;
        }
        break;

    case FILE_REQUEST:
        add_status_line(200, ok_200_title);
        if (m_file_stat.st_size != 0)
        {
            add_headers(m_file_stat.st_size);
            m_iv[0].iov_base = m_write_buf;
            m_iv[0].iov_len = m_write_idx;
            m_iv[1].iov_base = m_file_address;
            m_iv[1].iov_len = m_file_stat.st_size;
            m_iv_count = 2;

            bytes_to_send = m_write_idx + m_file_stat.st_size;
            // printf("%s\n",m_file_address);
            return true;
        }
        else
        {
            const char *ok_string = "<html><body></body></html>";
            add_headers(strlen(ok_string));
            if (!add_content(ok_string))
            {
                return false;
            }
        }

    default:
        return false;
    }
    m_iv[0].iov_base = m_write_buf;
    m_iv[0].iov_len = m_write_idx;
    m_iv_count = 1;
    bytes_to_send = m_write_idx;

    return true;
}

// 由线程池中的工作线程调用，这是处理HTTP请求的入口函数
void http_conn::process()
{

    // 解析HTTP请求
    HTTP_CODE read_ret = process_read();
    if (read_ret == NO_REQUEST)
    {
        modfd(m_epollfd, m_sockfd, EPOLLIN);
        return;
    }

    // 生成响应
    bool write_ret = process_write(read_ret);
    if (!write_ret)
    {
        close_conn();
    }
    modfd(m_epollfd, m_sockfd, EPOLLOUT);
}

// 设置client_data的timer
void http_conn::set_client_data_timer(util_timer *timer)
{
    client->timer = timer;
}

// client_data的getter
client_data *http_conn::get_client_data()
{
    return client;
}
